/*!
 * \file    test/test_diagonal_distribution.cpp
 * \ingroup unit_tests_diagonal_distribution
 *
 * \brief   The definition of unit tests for diagonal distributions in the
 *          \ref diagonal_distribution module and sub-modules.
 */

#include "test_diagonal_distribution.h"

#include "test_common.h"

#include "../common.h"
#include "../diagonal_distribution.h"
#include "../diagonal_distribution_slice.h"
#include "../diagonal_parameters.h"
#include "../errors.h"
#include "../math.h"
#include "../parameters_selection.h"

#include <gmp.h>
#include <mpfr.h>

#include <stdint.h>
#include <stdio.h>

/*!
 * \brief   The dimension for which slices are computed for the tests.
 */
#define TEST_SLICE_DIMENSION  2048

/*!
 * \brief   The dimension to which computed slices are scaled for the tests.
 */
#define TEST_SLICE_SCALED_DIMENSION  256

void test_diagonal_distribution_slice_det() {
  printf("Testing diagonal_distribution_slice_det...\n");

  /* Initialize a random state. */
  Random_State random_state;
  random_init(&random_state);

  /* Setup constants. */
  const uint32_t m = 128;
  const uint32_t sigma = 5;
  const uint32_t eta_bound = 25;
  const uint32_t s = 1;
  const uint32_t t = 30;

  /* Setup the distribution parameters. */
  Diagonal_Parameters parameters;
  diagonal_parameters_init(&parameters);

  {
    mpz_t d;
    mpz_init(d);

    mpz_t r;
    mpz_init(r);

    parameters_selection_deterministic_d_r(d, r, m);
    diagonal_parameters_explicit_m_s(
      &parameters, d, r, m, sigma, s, eta_bound, t);

    /* Clear memory. */
    mpz_clear(d);
    mpz_clear(r);
  }

  /* Setup diagonal slices. */
  Diagonal_Distribution_Slice slice;
  diagonal_distribution_slice_init(&slice, TEST_SLICE_DIMENSION);

  Diagonal_Distribution_Slice scaled_slice;
  diagonal_distribution_slice_init(&scaled_slice, TEST_SLICE_SCALED_DIMENSION);

  /* Tables of expected probabilities. */
  const int32_t offsets[9] = {
    -5, -4, -3, -2, -1, 0, 1, 2, 3
  };

  const int32_t etas[2 * 3 + 1] = {
     0, 1, -1, 2, -2, 25, -25
  };

  const long double expected_positive_probabilities[(2 * 3 + 1) * 9] = {
    /* From Mathematica: NIntegrate with flags: MaxRecursion->400,
     *    AccuracyGoal->100, WorkingPrecision->128. With truncation. */

    /* eta = 0: */

    0.0323551566868607057987128637435863424470758464295070103141839652641850335,
      /* [2^(m-5), 2^(m-4)] */
    0.0631410235334714141067135492736508468495944310739498462161862778164728671,
      /* [2^(m-4), 2^(m-3)] */
    0.1144094675627533466623530034715829169829886308167174798581331710970881274,
      /* [2^(m-3), 2^(m-2)] */
    0.1528605577062922115704915499274528852227941442420105076794329273362429410,
      /* [2^(m-2), 2^(m-1)] */
    0.0560891354848479208165243201617735694796343558387728798428957156861911738,
      /* [2^(m-1), 2^m] */
    0.0235836799389394685265174126269091895831236664504133809659564538405832384,
      /* [2^m, 2^(m+1)] */
    0.0124518973150204485762065258224944096778615407823754086102417542721608297,
      /* [2^(m+1), 2^(m+2)] */
    0.0063644343005867865695820209506418126921739943954736524740486117634231883,
      /* [2^(m+2), 2^(m+3)] */
    0.0031562129969183507784989830740790833483145080277677521194518887834426412,
      /* [2^(m+3), 2^(m+4)] */

    /* eta = 1: */

    2.3912150415866698983675342788740142353350909704366901669643696941253552e-6,
      /* [2^(m-5), 2^(m-4)] */
    3.9930166291498159497718332318344221503740680154814600558015753245602518e-6,
      /* [2^(m-4), 2^(m-3)] */
    4.4640538091797247665978907311771299327654955277355185296785732374979134e-6,
      /* [2^(m-3), 2^(m-2)] */
    1.3433527095076065516388519246536415897891377343436767062861033379566648e-6,
      /* [2^(m-2), 2^(m-1)] */
    0.0000359431248326344295593590441561492996945627486059687877401952763726499,
      /* [2^(m-1), 2^m] */
    0.0000537557811293427046143648686762837139683321560792353820217910218140952,
      /* [2^m, 2^(m+1)] */
    0.0001173240380104911995599118145648607852095493381475791390122908404771808,
      /* [2^(m+1), 2^(m+2)] */
    0.0002835644360994477453994434865858460877282339372603112522281988751184381,
      /* [2^(m+2), 2^(m+3)] */
    0.0009796583516177270375286030928202541647004452826136366214726299592533004,
      /* [2^(m+3), 2^(m+4)] */

    /* eta = -1: */

    2.8856052158645567673111292014693544362166670925958767675787078014180300e-6,
      /* [2^(m-5), 2^(m-4)] */
    5.8690755091330033118496415456567234481703709921547861264710349380026280e-6,
      /* [2^(m-4), 2^(m-3)] */
    0.0000104787434775030529629074449834462020153482766586216808746057343633356,
      /* [2^(m-3), 2^(m-2)] */
    8.7199404592888798291838064274012301789761444489947677187565536061098550e-6,
      /* [2^(m-2), 2^(m-1)] */
    0.0000171399578838241041630192916437208091079730282963253641796717243901294,
      /* [2^(m-1), 2^m] */
    0.0000451103758152459032709282160991891510178039229152853037533996510017142,
      /* [2^m, 2^(m+1)] */
    0.0000823850211170654907951787873484412455235241998663417201838118215791009,
      /* [2^(m+1), 2^(m+2)] */
    0.0001367594546686778706231595841394735854595859558647266492867825915315145,
      /* [2^(m+2), 2^(m+3)] */
    0.0001956363103336447314058052732432192354769209440516550814415438987171005,
      /* [2^(m+3), 2^(m+4)] */

    /* eta = 2: */

    3.5195479708417445686212304740635613407169266349469530384815013503579869e-7,
      /* [2^(m-5), 2^(m-4)] */
    9.2983965629805482778838954943795490129888855814490710240208522607143419e-7,
      /* [2^(m-4), 2^(m-3)] */
    2.5983731198207686323482562355073924684496626992652572401645387431468880e-6,
      /* [2^(m-3), 2^(m-2)] */
    5.3011221403510905553620836411007152306299148060011926789496030741675801e-6,
      /* [2^(m-2), 2^(m-1)] */
    2.4146374258583842728562516710173401073416494698682655995799167463295608e-6,
      /* [2^(m-1), 2^m] */
    0.0000123961684019126558784420285249700447906728066190859884336385721572439,
      /* [2^m, 2^(m+1)] */
    0.0000264745722212216410749708435404095097787131265445136507596324907107776,
      /* [2^(m+1), 2^(m+2)] */
    0.0000599355193119748494691990441850953907949647935201954528203339974096127,
      /* [2^(m+2), 2^(m+3)] */
    0.0001457430985130031802409554825603847020949271109341928190996150150392073,
      /* [2^(m+3), 2^(m+4)] */

    /* eta = -2: */

    1.4173597597116872964153171449013900634569567045325753357011475900155464e-7,
      /* [2^(m-5), 2^(m-4)] */
    1.3221447508027482963234234143290881109048968359695602251531761674348272e-7,
      /* [2^(m-4), 2^(m-3)] */
    4.1102221373816341060166233342855480225973198261656591319325456898455966e-8,
      /* [2^(m-3), 2^(m-2)] */
    2.0948003423103879507673243348084628839097226563321125181783292369644387e-6,
      /* [2^(m-2), 2^(m-1)] */
    8.7718495652497269613413310385796667332622880502080834141681295114276779e-6,
      /* [2^(m-1), 2^m] */
    0.0000109462674753286457399029004197223207816572501581585371624083839901420,
      /* [2^m, 2^(m+1)] */
    0.0000207610276029673713068091209237158196368695008543647517440705606879589,
      /* [2^(m+1), 2^(m+2)] */
    0.0000382756594394683956342215237211676289153789363670148242147409975282728,
      /* [2^(m+2), 2^(m+3)] */
    0.0000686568349611378154508450566867667916016714233408087208050017573685599,
      /* [2^(m+3), 2^(m+4)] */

    /* eta = 25: */

    7.530470472510625539083819466096289587495721446069951198508851114853521e-11,
      /* [2^(m-5), 2^(m-4)] */
    4.203937003131885309358039425947876135837263404239388640128649092447404e-11,
      /* [2^(m-4), 2^(m-3)] */
    2.2936869928709412856657211430535323690406225761375950534244670149961797e-9,
      /* [2^(m-3), 2^(m-2)] */
    2.4546470264418690589011770396028830124728671995516620147850547001233434e-8,
      /* [2^(m-2), 2^(m-1)] */
    4.5829675911865971650479569071807157570565158219091338855566765282446391e-8,
      /* [2^(m-1), 2^m] */
    7.2963323148652088551081880200604615812276626802846135727060878328492354e-8,
      /* [2^m, 2^(m+1)] */
    1.4668792117552145771040546128279593438618193498117001109302476560013350e-7,
      /* [2^(m+1), 2^(m+2)] */
    3.0226833724410941740659911604673429204551141860258299122131303993548632e-7,
      /* [2^(m+2), 2^(m+3)] */
    6.4493164383014278362122306486462590312076908462525247378973579356747845e-7,
      /* [2^(m+3), 2^(m+4)] */

    /* eta = -25: */

    8.276118470231931322831442590375057710338322812278344856366786105283964e-10,
      /* [2^(m-5), 2^(m-4)] */
    2.8948140233280128646513752543263101489964059983446275988845686492774055e-9,
      /* [2^(m-4), 2^(m-3)] */
    1.1415165975575522752700097107456392182692366538925292344628921782473420e-8,
      /* [2^(m-3), 2^(m-2)] */
    3.5688581545738385892889619221232341357346091474145095943546624855481642e-8,
      /* [2^(m-2), 2^(m-1)] */
    2.1988676262643711534701212093121528507355196720442128233678650182509330e-8,
      /* [2^(m-1), 2^m] */
    7.3772734914422684978123618431677937451549799898566552941423685807886980e-8,
      /* [2^m, 2^(m+1)] */
    1.4939931585716412037501174300412580472483968436557624239553727262528451e-7,
      /* [2^(m+1), 2^(m+2)] */
    3.0598769569231609063322552607935447292658427961463439458617655431135788e-7,
      /* [2^(m+2), 2^(m+3)] */
    6.0387973406528839081791918165786175855589437235155271166785357217198413e-7
      /* [2^(m+3), 2^(m+4)] */
  };

  const long double expected_negative_probabilities[(2 * 3 + 1) * 9] = {
    /* From Mathematica: NIntegrate with flags: MaxRecursion->400,
     *    AccuracyGoal->100, WorkingPrecision->128. With truncation. */

    /* eta = 0: */

    0.0323551566868607057987128637435863424470758464295070103141839652641850335,
      /* [-2^(m-4), -2^(m-5)] */
    0.0631410235334714141067135492736508468495944310739498462161862778164728671,
      /* [-2^(m-3), -2^(m-4)] */
    0.1144094675627533466623530034715829169829886308167174798581331710970881274,
      /* [-2^(m-2), -2^(m-3)] */
    0.1528605577062922115704915499274528852227941442420105076794329273362429410,
      /* [-2^(m-1), -2^(m-2)] */
    0.0560891354848479208165243201617735694796343558387728798428957156861911738,
      /* [-2^m, -2^(m-1)] */
    0.0235836799389394685265174126269091895831236664504133809659564538405832384,
      /* [-2^(m+1), -2^m] */
    0.0124518973150204485762065258224944096778615407823754086102417542721608297,
      /* [-2^(m+2), -2^(m+1)] */
    0.0063644343005867865695820209506418126921739943954736524740486117634231883,
      /* [-2^(m+3), -2^(m+2)] */
    0.0031562129969183507784989830740790833483145080277677521194518887834426412,
      /* [-2^(m+4), -2^(m+3)] */

    /* eta = 1: */

    2.8856052158645567673111292014693544362166670925958767675787078014180300e-6,
      /* [-2^(m-4), -2^(m-5)] */
    5.8690755091330033118496415456567234481703709921547861264710349380026280e-6,
      /* [-2^(m-3), -2^(m-4)] */
    0.0000104787434775030529629074449834462020153482766586216808746057343633356,
      /* [-2^(m-2), -2^(m-3)] */
    8.7199404592888798291838064274012301789761444489947677187565536061098550e-6,
      /* [-2^(m-1), -2^(m-2)] */
    0.0000171399578838241041630192916437208091079730282963253641796717243901294,
      /* [-2^m, -2^(m-1)] */
    0.0000451103758152459032709282160991891510178039229152853037533996510017142,
      /* [-2^(m+1), -2^m] */
    0.0000823850211170654907951787873484412455235241998663417201838118215791009,
      /* [-2^(m+2), -2^(m+1)] */
    0.0001367594546686778706231595841394735854595859558647266492867825915315145,
      /* [-2^(m+3), -2^(m+2)] */
    0.0001956363103336447314058052732432192354769209440516550814415438987171005,
      /* [-2^(m+4), -2^(m+3)] */

    /* eta = -1: */

    2.3912150415866698983675342788740142353350909704366901669643696941253552e-6,
      /* [-2^(m-4), -2^(m-5)] */
    3.9930166291498159497718332318344221503740680154814600558015753245602518e-6,
      /* [-2^(m-3), -2^(m-4)] */
    4.4640538091797247665978907311771299327654955277355185296785732374979134e-6,
      /* [-2^(m-2), -2^(m-3)] */
    1.3433527095076065516388519246536415897891377343436767062861033379566648e-6,
      /* [-2^(m-1), -2^(m-2)] */
    0.0000359431248326344295593590441561492996945627486059687877401952763726499,
      /* [-2^m, -2^(m-1)] */
    0.0000537557811293427046143648686762837139683321560792353820217910218140952,
      /* [-2^(m+1), -2^m] */
    0.0001173240380104911995599118145648607852095493381475791390122908404771808,
      /* [-2^(m+2), -2^(m+1)] */
    0.0002835644360994477453994434865858460877282339372603112522281988751184381,
      /* [-2^(m+3), -2^(m+2)] */
    0.0009796583516177270375286030928202541647004452826136366214726299592533004,
      /* [-2^(m+4), -2^(m+3)] */

    /* eta = 2: */

    1.4173597597116872964153171449013900634569567045325753357011475900155464e-7,
      /* [-2^(m-4), -2^(m-5)] */
    1.3221447508027482963234234143290881109048968359695602251531761674348272e-7,
      /* [-2^(m-3), -2^(m-4)] */
    4.1102221373816341060166233342855480225973198261656591319325456898455966e-8,
      /* [-2^(m-2), -2^(m-3)] */
    2.0948003423103879507673243348084628839097226563321125181783292369644387e-6,
      /* [-2^(m-1), -2^(m-2)] */
    8.7718495652497269613413310385796667332622880502080834141681295114276779e-6,
      /* [-2^m, -2^(m-1)] */
    0.0000109462674753286457399029004197223207816572501581585371624083839901420,
      /* [-2^(m+1), -2^m] */
    0.0000207610276029673713068091209237158196368695008543647517440705606879589,
      /* [-2^(m+2), -2^(m+1)] */
    0.0000382756594394683956342215237211676289153789363670148242147409975282728,
      /* [-2^(m+3), -2^(m+2)] */
    0.0000686568349611378154508450566867667916016714233408087208050017573685599,
      /* [-2^(m+4), -2^(m+3)] */

    /* eta = -2: */

    3.5195479708417445686212304740635613407169266349469530384815013503579869e-7,
      /* [-2^(m-4), -2^(m-5)] */
    9.2983965629805482778838954943795490129888855814490710240208522607143419e-7,
      /* [-2^(m-3), -2^(m-4)] */
    2.5983731198207686323482562355073924684496626992652572401645387431468880e-6,
      /* [-2^(m-2), -2^(m-3)] */
    5.3011221403510905553620836411007152306299148060011926789496030741675801e-6,
      /* [-2^(m-1), -2^(m-2)] */
    2.4146374258583842728562516710173401073416494698682655995799167463295608e-6,
      /* [-2^m, -2^(m-1)] */
    0.0000123961684019126558784420285249700447906728066190859884336385721572439,
      /* [-2^(m+1), -2^m] */
    0.0000264745722212216410749708435404095097787131265445136507596324907107776,
      /* [-2^(m+2), -2^(m+1)] */
    0.0000599355193119748494691990441850953907949647935201954528203339974096127,
      /* [-2^(m+3), -2^(m+2)] */
    0.0001457430985130031802409554825603847020949271109341928190996150150392073,
      /* [-2^(m+4), -2^(m+3)] */

    /* eta = 25: */

    8.276118470231931322831442590375057710338322812278344856366786105283964e-10,
      /* [-2^(m-4), -2^(m-5)] */
    2.8948140233280128646513752543263101489964059983446275988845686492774055e-9,
      /* [-2^(m-3), -2^(m-4)] */
    1.1415165975575522752700097107456392182692366538925292344628921782473420e-8,
      /* [-2^(m-2), -2^(m-3)] */
    3.5688581545738385892889619221232341357346091474145095943546624855481642e-8,
      /* [-2^(m-1), -2^(m-2)] */
    2.1988676262643711534701212093121528507355196720442128233678650182509330e-8,
      /* [-2^m, -2^(m-1)] */
    7.3772734914422684978123618431677937451549799898566552941423685807886980e-8,
      /* [-2^(m+1), -2^m] */
    1.4939931585716412037501174300412580472483968436557624239553727262528451e-7,
      /* [-2^(m+2), -2^(m+1)] */
    3.0598769569231609063322552607935447292658427961463439458617655431135788e-7,
      /* [-2^(m+3), -2^(m+2)] */
    6.0387973406528839081791918165786175855589437235155271166785357217198413e-7,
      /* [-2^(m+4), -2^(m+3)] */

    /* eta = -25: */

    7.530470472510625539083819466096289587495721446069951198508851114853521e-11,
      /* [-2^(m-4), -2^(m-5)] */
    4.203937003131885309358039425947876135837263404239388640128649092447404e-11,
      /* [-2^(m-3), -2^(m-4)] */
    2.2936869928709412856657211430535323690406225761375950534244670149961797e-9,
      /* [-2^(m-2), -2^(m-3)] */
    2.4546470264418690589011770396028830124728671995516620147850547001233434e-8,
      /* [-2^(m-1), -2^(m-2)] */
    4.5829675911865971650479569071807157570565158219091338855566765282446391e-8,
      /* [-2^m, -2^(m-1)] */
    7.2963323148652088551081880200604615812276626802846135727060878328492354e-8,
      /* [-2^(m+1), -2^m] */
    1.4668792117552145771040546128279593438618193498117001109302476560013350e-7,
      /* [-2^(m+2), -2^(m+1)] */
    3.0226833724410941740659911604673429204551141860258299122131303993548632e-7,
      /* [-2^(m+3), -2^(m+2)] */
    6.4493164383014278362122306486462590312076908462525247378973579356747845e-7
      /* [-2^(m+4), -2^(m+3)] */
  };

  /* Declare temporary variables used below. */
  double tmp_min_log_alpha_r;
  double tmp_max_log_alpha_r;

  /* Compute slices. */
  for (uint32_t i = 0; i < (2 * 3 + 1) * 9; i++) {
    const int32_t offset = offsets[i % 9];
    const int32_t eta = etas[i / 9];

    if (0 == (i % 9)) {
      printf(" Computing slices for eta = %d...\n", eta);
    }

    int32_t min_log_alpha_r = m + offset;
    int32_t max_log_alpha_r = m + offset + 1;

    /* Positive. */
    printf("  Computing slice for min_log_alpha_r = %d...\n", min_log_alpha_r);

    diagonal_distribution_slice_compute_richardson(
      &slice,
      &parameters,
      min_log_alpha_r,
      eta);

    /* Sanity checks. */
    if (TRUE != test_cmp_ld(slice.total_probability,
                            expected_positive_probabilities[i]))
    {
      critical("test_diagonal_distribution_slice_det(): "
        "Incorrect probability.");
    }

    if (0 != slice.total_error) {
      critical("test_diagonal_distribution_slice_det(): "
        "Expected a total error of zero.");
    }

    if (min_log_alpha_r != slice.min_log_alpha_r) {
      critical("test_diagonal_distribution_slice_det(): "
        "Incorrect min_log_alpha_r.");
    }

    int tmp_eta;

    diagonal_distribution_slice_coordinates(
      &slice, &tmp_min_log_alpha_r, &tmp_max_log_alpha_r, &tmp_eta);

    if ((tmp_min_log_alpha_r != min_log_alpha_r) ||
        (tmp_max_log_alpha_r != max_log_alpha_r) ||
        (tmp_eta != eta))
    {
      critical("test_diagonal_distribution_slice_det(): "
        "Incorrect min_log_alpha_r and max_log_alpha_r returned.");
    }

    diagonal_distribution_slice_sample_region(
      &slice,
      &random_state,
      &tmp_min_log_alpha_r,
      &tmp_max_log_alpha_r,
      &tmp_eta);

    if ((abs_d(tmp_min_log_alpha_r) < abs_i(min_log_alpha_r)) ||
        (abs_d(tmp_max_log_alpha_r) > abs_i(max_log_alpha_r)) ||
        (sgn_d(tmp_min_log_alpha_r) != sgn_i(min_log_alpha_r)) ||
        (sgn_d(tmp_max_log_alpha_r) != sgn_i(max_log_alpha_r)) ||
        (tmp_eta != eta))
    {
      critical("test_diagonal_distribution_slice_det(): "
        "Failed to sample a region from the slice.");
    }


    /* Negative. */
    min_log_alpha_r *= -1;
    max_log_alpha_r *= -1;

    printf("  Computing slice for min_log_alpha_r = %d...\n", min_log_alpha_r);

    diagonal_distribution_slice_compute_richardson(
      &slice,
      &parameters,
      min_log_alpha_r,
      eta);

    /* Sanity checks. */
    if (TRUE != test_cmp_ld(slice.total_probability,
                            expected_negative_probabilities[i]))
    {
      critical("test_diagonal_distribution_slice_det(): "
        "Incorrect probability.");
    }

    if (0 != slice.total_error) {
      critical("test_diagonal_distribution_slice_det(): "
        "Expected a total error of zero.");
    }

    if (min_log_alpha_r != slice.min_log_alpha_r) {
      critical("test_diagonal_distribution_slice_det(): "
        "Incorrect min_log_alpha_r.");
    }

    diagonal_distribution_slice_coordinates(
      &slice, &tmp_min_log_alpha_r, &tmp_max_log_alpha_r, &tmp_eta);

    if ((tmp_min_log_alpha_r != min_log_alpha_r) ||
        (tmp_max_log_alpha_r != max_log_alpha_r) ||
        (tmp_eta != eta))
    {
      critical("test_diagonal_distribution_slice_det(): "
        "Incorrect min_log_alpha_r and max_log_alpha_r returned.");
    }

    diagonal_distribution_slice_sample_region(
      &slice,
      &random_state,
      &tmp_min_log_alpha_r,
      &tmp_max_log_alpha_r,
      &tmp_eta);

    if ((abs_d(tmp_min_log_alpha_r) < abs_i(min_log_alpha_r)) ||
        (abs_d(tmp_max_log_alpha_r) > abs_i(max_log_alpha_r)) ||
        (sgn_d(tmp_min_log_alpha_r) != sgn_i(min_log_alpha_r)) ||
        (sgn_d(tmp_max_log_alpha_r) != sgn_i(max_log_alpha_r)) ||
        (tmp_eta != eta))
    {
      critical("test_diagonal_distribution_slice_det(): "
        "Failed to sample a region from the slice.");
    }

    /* Test scaling. */
    diagonal_distribution_slice_copy_scale(&scaled_slice, &slice);

     if ((scaled_slice.min_log_alpha_r != slice.min_log_alpha_r) ||
        (scaled_slice.total_error) != (slice.total_error) ||
        (scaled_slice.total_probability) != (slice.total_probability))
    {
      critical("test_diagonal_distribution_slice_det(): "
        "Failed to correctly scale the slice.");
    }

    long double tmp_sum = 0;

    for (uint32_t i = 0; i < TEST_SLICE_SCALED_DIMENSION; i++) {
      tmp_sum += scaled_slice.norm_vector[i];

      long double tmp_inner_sum = 0;

      for (uint32_t j = 0;
        j < (TEST_SLICE_DIMENSION / TEST_SLICE_SCALED_DIMENSION); j++)
      {
        tmp_inner_sum +=
          slice.norm_vector[i * (TEST_SLICE_DIMENSION / \
            TEST_SLICE_SCALED_DIMENSION) + j];
      }

      if (tmp_inner_sum != scaled_slice.norm_vector[i]) {
        critical("test_diagonal_distribution_slice_det(): "
        "Failed to correctly scale the slice.");
      }
    }

    if (TRUE != test_cmp_ld(slice.total_probability, tmp_sum)) {
      critical("test_diagonal_distribution_slice_det(): "
        "Incorrect total probability.");
    }
  }

  /* Clear memory. */
  random_close(&random_state);
  diagonal_parameters_clear(&parameters);
  diagonal_distribution_slice_clear(&slice);
  diagonal_distribution_slice_clear(&scaled_slice);
}

void test_diagonal_distribution() {
  test_diagonal_distribution_slice_det();
}
